#include <iostream>
using namespace std;
class Box
{
	public:
	int index;
	int lenght;
	int height;
	int width;
	Box(void) : index(0), lenght(0), height(0), width(0)
	{}
	void print()
	{cout << index << " " << lenght << " " <<height << " " << width << endl;}
	bool operator < (Box&)const;
};
bool Box:: operator < (Box& b) const
{
	return ((lenght < b.lenght) || (lenght < b.height) || (lenght < b.width)) && ((height < b.lenght) || (height < b.height) || (height < b.width)) && ((width < b.lenght) || (width < b.height) || (width < b.width)) ? true : false;
}
void InsertionSort(Box* array, int n);
int main()
{
	int n = 0;
	cin >> n;
	Box* boxes = new Box[n];
	for(int i = 0; i < n; ++i)
	{
		cin >> boxes[i].lenght;
		cin >> boxes[i].height;
		cin >> boxes[i].width;
		boxes[i].index = i;
	}
	InsertionSort(boxes, n);
	for(int i = 0; i < n; ++i)
	{
		cout<<boxes[i].index<<" ";
	}
	delete [] boxes;
	//system ("pause");
	return 0;
}
void InsertionSort(Box* array, int n)
{
	Box temp; 
    int  item = 0; 
    for (int i = 1; i < n; ++i)
    {
        temp = array[i]; 
        item = i - 1; 
        while((item >= 0) && (temp < array[i]))
        {
            array[item + 1] = array[item]; 
            array[item] = temp;
            item--;
        }
    }
}
//void InsertionSort(Box* array, int n)
//{
//	Box temp; // временная переменная для хранения значения элемента сортируемого массива
//     int  item = 0; // индекс предыдущего элемента
//    for (int counter = 1; counter < n; counter++)
//    {
//        temp = array[counter]; // инициализируем временную переменную текущим значением элемента массива
//        item = counter-1; // запоминаем индекс предыдущего элемента массива
//        while(item >= 0 &&   temp < array[item]) // пока индекс не равен 0 и предыдущий элемент массива больше текущего
//        {
//            array[item + 1] = array[item]; // перестановка элементов массива
//            array[item] = temp;
//            item--;
//        }
//    }
//}


